// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::FlatBuffers;

public struct User : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static User GetRootAsUser(ByteBuffer _bb) { return GetRootAsUser(_bb, new User()); }
  public static User GetRootAsUser(ByteBuffer _bb, User obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public User __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Userid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
  public string Password { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetPasswordBytes() { return __p.__vector_as_arraysegment(8); }

  public static Offset<User> CreateUser(FlatBufferBuilder builder,
      int Userid = 0,
      StringOffset NameOffset = default(StringOffset),
      StringOffset PasswordOffset = default(StringOffset)) {
    builder.StartObject(3);
    User.AddPassword(builder, PasswordOffset);
    User.AddName(builder, NameOffset);
    User.AddUserid(builder, Userid);
    return User.EndUser(builder);
  }

  public static void StartUser(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddUserid(FlatBufferBuilder builder, int Userid) { builder.AddInt(0, Userid, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddPassword(FlatBufferBuilder builder, StringOffset PasswordOffset) { builder.AddOffset(2, PasswordOffset.Value, 0); }
  public static Offset<User> EndUser(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<User>(o);
  }
};

public struct DataBase : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static DataBase GetRootAsDataBase(ByteBuffer _bb) { return GetRootAsDataBase(_bb, new DataBase()); }
  public static DataBase GetRootAsDataBase(ByteBuffer _bb, DataBase obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool DataBaseBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "DATA"); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public DataBase __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Port { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string IpAddress { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetIpAddressBytes() { return __p.__vector_as_arraysegment(6); }
  public User? UserList(int j) { int o = __p.__offset(8); return o != 0 ? (User?)(new User()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int UserListLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<DataBase> CreateDataBase(FlatBufferBuilder builder,
      int Port = 0,
      StringOffset IpAddressOffset = default(StringOffset),
      VectorOffset UserListOffset = default(VectorOffset)) {
    builder.StartObject(3);
    DataBase.AddUserList(builder, UserListOffset);
    DataBase.AddIpAddress(builder, IpAddressOffset);
    DataBase.AddPort(builder, Port);
    return DataBase.EndDataBase(builder);
  }

  public static void StartDataBase(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddPort(FlatBufferBuilder builder, int Port) { builder.AddInt(0, Port, 0); }
  public static void AddIpAddress(FlatBufferBuilder builder, StringOffset IpAddressOffset) { builder.AddOffset(1, IpAddressOffset.Value, 0); }
  public static void AddUserList(FlatBufferBuilder builder, VectorOffset UserListOffset) { builder.AddOffset(2, UserListOffset.Value, 0); }
  public static VectorOffset CreateUserListVector(FlatBufferBuilder builder, Offset<User>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartUserListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<DataBase> EndDataBase(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<DataBase>(o);
  }
  public static void FinishDataBaseBuffer(FlatBufferBuilder builder, Offset<DataBase> offset) { builder.Finish(offset.Value, "DATA"); }
  public static void FinishSizePrefixedDataBaseBuffer(FlatBufferBuilder builder, Offset<DataBase> offset) { builder.FinishSizePrefixed(offset.Value, "DATA"); }
};

